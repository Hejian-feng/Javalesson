Java---重载
    1）功能不同但是功能相似，这样可以使用重载。
    2）方法重载条件：1、同一个类中；2、方法名相同；3、参数列表不同【数量不同、顺序不同、类型不同】
    3）重载和方法名+参数列表有关；和返回值类型、修饰符列表无关。
    注：在另一个文件中定义一个自定义的类，可以借助该类的字节码文件在另一个文件中调用该类中自定义的函数。

Java---递归
    1）方法自身调用
    2）递归很耗费栈内存，能不用就不用。
    3）递归既是有正确的结束条件也可能出现栈内存溢出。

Java---数组
    1）概念同C/C++，数组长度：元素个数
    2）数组是引用类型的变量
    3）一维数组的定义：int [] 数组名; 数组名 = new 数据类型[]{数组元素定义。。。}
                   数据类型[] 数组名 = new 数据类型[长度]
                   数组和数组元素的初始化同时进行【静态初始化】
		   数组和数组元素分开初始化【动态初始化】
    4）获取数组长度：数组名.length
    5）不同类型数组的默认初始化值：1、整型数组（int、short、byte）都是0；2、浮点型默认0.0；3、char型默认ASCII的0或者\u0000；4、boolean型默认false；5、String型默认为空值（null）
    注：new出来的东西都存放在堆中。
    6）二维数组定义： 数据类型 [][] 数组名 = new 数据类型[][]{{数据元素}、{数据元素}。。。}
                      数据类型 [][] 数组名 = new 数据类型[3][2]
		      数据类型 [][] 数组名 = new 数据类型[3][]
		      数据类型 []数组名[]  = new 数据类型[][]
    7）获取二维数组长度：数组名.length--->获取的是数组的个数
			 数组名[num].length--->获取元素个数
    8）二维数组的外层元素保存的是数组的地址值，内存元素保存的是元素值
    注：数据类型 [][] 数组名 = new 数据类型[3][]定义的数组输出外层元素的值为null，内层元素还没有分配空间


Java---面向对象编程
    1）面向对象：模块化编程，关联程度强；面向过程：非模块化编程，关联程度弱。
    2）面向对象的三大特征：封装、继承、多态。
    3）面向对象的开发方式开发软件：面向对象的分析（OOA）、设计（OOB）、编程（OOP）

Java---Eclipse配置
    Eclipse的使用