Java---面向对象的程序设计
    1）类（构造对象的基础）、封装（数据保护）、继承。
    2）类之间的关系：依赖（uses-a）、聚合（has-a）、继承（is-a）【尽可能的将依赖关系降低到最少】
    3）对象变量并不是实际包含一个对象，只是应用一个对象而已【类似于c++中的对象指针】。
    4）不同的类存在于不同的源文件中，java编译器会自动的搜索用到的类的源文件的字节码文件，若未编译则自动编译。
    5）关键字var：依据等式后面的数据类型自动给变量赋予对应的类型。
    6）显式参数：就是平时见到的在方法名括号中间的参数，就是所谓能看得见的参数。
       隐式参数：隐式参数表示在方法中使用，但是没有写在方法参数中也没有在方法体内声明的变量（在类中声明的变量）
    7）返回一个对象的访问器方法，在返回时只能返回对象的克隆【对象变量只是对象的引用】
    8）final关键字：
                   *当用final修饰一个类时，表明这个类不能被继承。
                   *当用final修饰一个方法时，第一个原因是把方法锁定，以防任何继承类修改它的含义；第二个原因是效率。
                    父类的final方法是不能被子类所覆盖的，也就是说子类是不能够存在和父类一模一样的方法的。
                    如果父类中final修饰的方法同时访问控制权限为private，将会导致子类中不能直接继承到此方法，因此，此时可以在子类中定义相同的方法名和参数，此时不再产生重写与final的矛盾，而是在子类中重新定义了新的方法。
                   * 当用final修饰一个变量时，final成员变量表示常量，只能被赋值一次，赋值后值不再改变。
                     当final修饰一个基本数据类型时，表示该基本数据类型的值一旦在初始化后便不能发生变化；如果final修饰一个引用类型时，则在对其初始化之后便不能再让其指向其他对象了，但该引用所指向的对象的内容是可以发生变化的。
                     final修饰一个成员变量（属性），必须要显示初始化。这里有两种初始化方式，一种是在变量声明的时候初始化；第二种方法是在声明变量的时候不赋初值，但是要在这个变量所在的类的所有的构造函数中对这个变量赋初值。
                     当函数的参数类型声明为final时，说明该参数是只读型的。即你可以读取使用该参数，但是无法改变该参数的值。
                   * 当用final作用于类的成员变量时，成员变量（注意是类的成员变量，局部变量只需要保证在使用之前被初始化赋值即可）必须在定义时或者构造器中进行初始化赋值，而且final变量一旦被初始化赋值之后，就不能再被赋值了。
    9）static关键字：
                   * static方法也成为静态方法，由于静态方法不依赖于任何对象就可以直接访问，因此对于静态方法来说，是没有this的，因为不依附于任何对象。
                     在静态方法中不能访问类的非静态成员变量和非静态方法。
                   * 静态变量被所有对象共享，在内存中只有一个副本，在类初次加载的时候才会初始化，非静态变量是对象所拥有的，在创建对象的时候被初始化，存在多个副本，各个对象拥有的副本互不影响。
    11）java中参数传递总是按值传递【对象的引用作为参数便可以改变对象的状态，传递的参数实际上是对象的引用】

Java---继承
    1）基类（java叫法：超类）、子类（java叫法：子类）
    2）子类构造器（super关键字）：当我们要调用父类方法时使用。所以，无论何时，父类和子类都具有相同的命名方法，那么为了解决歧义，我们使用super关键字。
    3）super关键字和this关键字的区别：使用super来引用父类的成分，用this来引用当前对象。
    4）多态：一个对象变量可以指示多种实际类型，在运行时能够自动地选择适当的类中的方法（动态绑定【默认行为】）。
    5）继承的规则是替换规则，超类对象的任何地方都可以由子类对象替换。
    6）超类对象和子类对象的相互赋值类似于C++（小范围-->大范围，大范围-/->小范围）